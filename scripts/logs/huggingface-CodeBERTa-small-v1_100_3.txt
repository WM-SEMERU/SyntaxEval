No config specified, defaulting to: code_search_net/all
Found cached dataset code_search_net (/home/svelascodimate/.cache/huggingface/datasets/code_search_net/all/1.0.0/80a244ab541c6b2125350b764dc5c2b715f65f00de7a56107a28915fac173a27)
Parameter 'function'=<function <lambda> at 0x7fede0b88430> of the transform datasets.arrow_dataset.Dataset.filter@2.0.1 couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.
/home/svelascodimate/miniconda3/envs/code-check-list/lib/python3.10/site-packages/CodeCheckList/grammars
  0%|          | 0/101 [00:00<?, ?ba/s]Token indices sequence length is longer than the specified maximum sequence length for this model (517 > 512). Running this sequence through the model will result in indexing errors
  1%|          | 1/101 [00:00<01:37,  1.03ba/s]  2%|▏         | 2/101 [00:01<01:24,  1.16ba/s]  3%|▎         | 3/101 [00:02<01:14,  1.31ba/s]  4%|▍         | 4/101 [00:03<01:09,  1.39ba/s]  5%|▍         | 5/101 [00:03<01:00,  1.59ba/s]  6%|▌         | 6/101 [00:03<00:52,  1.79ba/s]  7%|▋         | 7/101 [00:04<00:53,  1.75ba/s]  8%|▊         | 8/101 [00:05<00:52,  1.76ba/s]  9%|▉         | 9/101 [00:05<00:49,  1.86ba/s] 10%|▉         | 10/101 [00:06<00:47,  1.93ba/s] 11%|█         | 11/101 [00:06<00:48,  1.86ba/s] 12%|█▏        | 12/101 [00:07<00:50,  1.77ba/s] 13%|█▎        | 13/101 [00:07<00:53,  1.64ba/s] 14%|█▍        | 14/101 [00:08<00:49,  1.74ba/s] 15%|█▍        | 15/101 [00:09<00:50,  1.69ba/s] 16%|█▌        | 16/101 [00:09<00:49,  1.72ba/s] 17%|█▋        | 17/101 [00:10<00:48,  1.74ba/s] 18%|█▊        | 18/101 [00:10<00:45,  1.82ba/s] 19%|█▉        | 19/101 [00:11<00:45,  1.81ba/s] 20%|█▉        | 20/101 [00:11<00:44,  1.82ba/s] 21%|██        | 21/101 [00:12<00:45,  1.75ba/s] 22%|██▏       | 22/101 [00:12<00:43,  1.81ba/s] 23%|██▎       | 23/101 [00:13<00:35,  2.21ba/s] 25%|██▍       | 25/101 [00:13<00:21,  3.57ba/s] 27%|██▋       | 27/101 [00:13<00:14,  4.99ba/s] 28%|██▊       | 28/101 [00:13<00:15,  4.72ba/s] 29%|██▊       | 29/101 [00:13<00:13,  5.19ba/s] 30%|██▉       | 30/101 [00:13<00:12,  5.66ba/s] 32%|███▏      | 32/101 [00:14<00:10,  6.76ba/s] 33%|███▎      | 33/101 [00:14<00:10,  6.63ba/s] 34%|███▎      | 34/101 [00:14<00:09,  6.89ba/s] 35%|███▍      | 35/101 [00:14<00:08,  7.38ba/s] 36%|███▌      | 36/101 [00:14<00:08,  7.45ba/s] 37%|███▋      | 37/101 [00:14<00:08,  7.39ba/s] 38%|███▊      | 38/101 [00:15<00:08,  7.32ba/s] 40%|███▉      | 40/101 [00:15<00:07,  8.32ba/s] 42%|████▏     | 42/101 [00:15<00:07,  8.30ba/s] 43%|████▎     | 43/101 [00:15<00:07,  7.49ba/s] 45%|████▍     | 45/101 [00:15<00:06,  8.59ba/s] 47%|████▋     | 47/101 [00:15<00:05,  9.76ba/s] 48%|████▊     | 48/101 [00:16<00:05,  9.44ba/s] 49%|████▊     | 49/101 [00:16<00:05,  9.21ba/s] 50%|████▉     | 50/101 [00:16<00:05,  8.61ba/s] 50%|█████     | 51/101 [00:16<00:05,  8.35ba/s] 51%|█████▏    | 52/101 [00:16<00:06,  7.35ba/s] 52%|█████▏    | 53/101 [00:16<00:06,  7.31ba/s] 53%|█████▎    | 54/101 [00:16<00:06,  7.59ba/s] 54%|█████▍    | 55/101 [00:17<00:05,  8.12ba/s] 55%|█████▌    | 56/101 [00:17<00:05,  8.53ba/s] 56%|█████▋    | 57/101 [00:17<00:04,  8.87ba/s] 57%|█████▋    | 58/101 [00:17<00:04,  8.71ba/s] 58%|█████▊    | 59/101 [00:17<00:05,  7.87ba/s] 59%|█████▉    | 60/101 [00:17<00:05,  7.66ba/s] 61%|██████▏   | 62/101 [00:17<00:04,  8.66ba/s] 63%|██████▎   | 64/101 [00:17<00:03,  9.95ba/s] 65%|██████▌   | 66/101 [00:18<00:03, 11.05ba/s] 67%|██████▋   | 68/101 [00:18<00:03, 10.71ba/s] 69%|██████▉   | 70/101 [00:18<00:02, 10.68ba/s] 71%|███████▏  | 72/101 [00:18<00:03,  9.39ba/s] 73%|███████▎  | 74/101 [00:18<00:02,  9.69ba/s] 75%|███████▌  | 76/101 [00:19<00:02,  9.49ba/s] 76%|███████▌  | 77/101 [00:19<00:02,  8.62ba/s] 77%|███████▋  | 78/101 [00:19<00:02,  8.69ba/s] 78%|███████▊  | 79/101 [00:19<00:02,  8.71ba/s] 79%|███████▉  | 80/101 [00:19<00:02,  8.82ba/s] 80%|████████  | 81/101 [00:19<00:02,  8.18ba/s] 81%|████████  | 82/101 [00:19<00:02,  8.37ba/s] 82%|████████▏ | 83/101 [00:20<00:02,  8.27ba/s] 83%|████████▎ | 84/101 [00:20<00:02,  7.99ba/s] 84%|████████▍ | 85/101 [00:20<00:02,  7.94ba/s] 85%|████████▌ | 86/101 [00:20<00:01,  8.21ba/s] 86%|████████▌ | 87/101 [00:20<00:01,  8.00ba/s] 88%|████████▊ | 89/101 [00:20<00:01,  8.95ba/s] 90%|█████████ | 91/101 [00:20<00:00, 10.23ba/s] 92%|█████████▏| 93/101 [00:21<00:00, 10.20ba/s] 94%|█████████▍| 95/101 [00:21<00:00,  9.72ba/s] 95%|█████████▌| 96/101 [00:21<00:00,  9.15ba/s] 96%|█████████▌| 97/101 [00:21<00:00,  8.93ba/s] 97%|█████████▋| 98/101 [00:21<00:00,  8.91ba/s] 99%|█████████▉| 100/101 [00:21<00:00,  9.78ba/s]100%|██████████| 101/101 [00:21<00:00,  4.60ba/s]
('as_pattern_target', 'identifier')
def detect_os():
    """Detect operating system.
    """

    # Inspired by:
    # https://github.com/scivision/pybashutils/blob/78b7f2b339cb03b1c37df94015098bbe462f8526/pybashutils/windows_linux_detect.py

    syst = system().lower()
    os = 'unknown'

    if 'cygwin' in syst:
        os = 'cygwin'
    elif 'darwin' in syst:
        os = 'mac'
    elif 'linux' in syst:
        os = 'linux'
        # detect WSL https://github.com/Microsoft/BashOnWindows/issues/423
        try:
            with open('/proc/version', 'r') as f:
                if 'microsoft' in f.read().lower():
                    os = 'wsl'
        except: pass
    elif 'windows' in syst:
        os = 'windows'
    elif 'bsd' in syst:
        os = 'bsd'

    return os
 f
Traceback (most recent call last):
  File "/home/svelascodimate/Documents/SEMERU/CodeCheckList/scripts/code_check_list.py", line 28, in <module>
    results_dataframe = evaluator(test_set, number_of_predictions_per_sample)
  File "/home/svelascodimate/miniconda3/envs/code-check-list/lib/python3.10/site-packages/CodeCheckList/evaluator.py", line 25, in __call__
    results_dict = self.evaluate_test_set(test_set, number_of_predictions)
  File "/home/svelascodimate/miniconda3/envs/code-check-list/lib/python3.10/site-packages/CodeCheckList/evaluator.py", line 40, in evaluate_test_set
    sample_results = self.evaluate_code_snippet(sample['whole_func_string'], number_of_predictions)
  File "/home/svelascodimate/miniconda3/envs/code-check-list/lib/python3.10/site-packages/CodeCheckList/evaluator.py", line 56, in evaluate_code_snippet
    evaluation_results.append({node_type: self.evaluate_node_type_on_snippet(source_code, node_type_idx, number_of_predictions)})
  File "/home/svelascodimate/miniconda3/envs/code-check-list/lib/python3.10/site-packages/CodeCheckList/evaluator.py", line 68, in evaluate_node_type_on_snippet
    masked_code_encoding = self.masker(source_code, self.tokenizer(source_code), target_node_type_idx)
  File "/home/svelascodimate/miniconda3/envs/code-check-list/lib/python3.10/site-packages/CodeCheckList/tokenizer.py", line 71, in __call__
    raise e
  File "/home/svelascodimate/miniconda3/envs/code-check-list/lib/python3.10/site-packages/CodeCheckList/tokenizer.py", line 64, in __call__
    encoding["parent_ast_ids"].append(self.node_types.index(parent_node_type))
ValueError: 'as_pattern_target' is not in list
